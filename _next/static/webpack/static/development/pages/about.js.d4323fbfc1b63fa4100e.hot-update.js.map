{"version":3,"file":"static/webpack/static/development/pages/about.js.d4323fbfc1b63fa4100e.hot-update.js","sources":["webpack:///./components/EjrbussMarkdown.js"],"sourcesContent":["import ReactMarkdown from 'react-markdown';\n\n// Components\nimport Editor from './Editor';\n\n// Libraries\nimport noSpaceLang from '../lib/no-space-lang';\n\nconst evaluators = {\n    jsEvaluator(value) {\n        try {\n            return eval(value).toString();\n        } catch(err) {\n            return <span className='clr-error'>{err.toString()}</span>;\n        }\n    },\n    echo(value) {\n        return value;\n    },\n};\n\nexport const registerEvaluator = (name, evaluator) => {\n    evaluators[name] = evaluator;\n};\n\nconst getHeaderText = ({ children: [{ props: { value }}] }) => {\n    return value;\n};\n\nconst getHeaderId = props => {\n    return getHeaderText(props).replace(/\\s/g, '').toLowerCase();\n};\n\nexport default ({ source, noHeaderLinks }) => (\n    <ReactMarkdown className='md indexable' source={source} renderers={{\n\n        code({ value, language }) {\n            const { lang, immediate, readonly, evaluator, placeholder, nolines } = noSpaceLang(language, { \n                defaults : { lang: '' },\n                allowed  : ['lang', 'immediate', 'readonly', 'evaluator', 'placeholder', 'nolines'] \n            });\n            return (\n                <Editor \n                    initialText={placeholder ? undefined : value} \n                    language={lang} \n                    evaluator={evaluators[evaluator]}\n                    placeholder={placeholder ? value : undefined}\n                    readonly={readonly} \n                    immediate={immediate}\n                    nolines={nolines}\n                    nooutput={evaluator ? false : true}\n                />\n            );\n        },\n\n        inlineCode({ value }) {\n            if (/^icon:/.test(value)) {\n                return <i className={value.split(':')[1]}/>\n            }\n            return <code>{value}</code>;\n        },\n\n        heading(props) {\n            const id = getHeaderId(props);\n            switch (props.level) {\n                case 1: {\n                    if (noHeaderLinks) {\n                        return <h1>{props.children}</h1>;\n                    }\n                    return <>\n                        <a className='anchor-point' id={id} />\n                        <a className='anchor' href={'#' + id}>\n                            <h1>{props.children}</h1>\n                            <br />\n                        </a>\n                    </>;\n                }\n                case 2: {\n                    if (noHeaderLinks) {\n                        return <h2>{props.children}</h2>;\n                    }\n                    return <>\n                        <a className='anchor-point' id={id} />\n                        <a className='anchor' href={'#' + id}>\n                            <h2>{props.children}</h2>\n                            <br />\n                        </a>\n                    </>\n                }\n                case 3: return <h3 id={getHeaderId(props)}>{props.children}</h3>;\n                case 4: return <h4 id={getHeaderId(props)}>{props.children}</h4>;\n                case 5: return <h5 id={getHeaderId(props)}>{props.children}</h5>;\n                case 6: return <h6 id={getHeaderId(props)}>{props.children}</h6>;\n                default: throw new Error('Unknown header depth: ' + props.level);\n            }\n        },\n\n        table(props) {\n            return <table className='table table-striped table-scroll'>{props.children}</table>;\n        }\n\n    }} />\n);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AA7BA;AA+BA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;;;;A","sourceRoot":""}